# Nathan Murray Prototype Light Intensity sensor
#Slave address is floating therefore 0x72
#
#
#
#
#
#
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw)

#Set timer to generate event every 1s
    call hardware_set_soft_timer(20000, 1, 0)

    call gap_set_mode($84, gap_non_connectable)	# $84 to enable enhanced broadcasting (central node will acknowlwdge receipt of a broadcast
	call gap_set_adv_parameters($4000, $4000, $04)
    call hardware_set_soft_timer(20000, 1, 0)	# continuous 1 second timer
end
end

dim written
dim result
dim data_len
dim data
dim string(3)
dim output (8)


# procedure to output ASCII-formatted integer from a Hex value (input range [0, 2147483647]) obtained from https://bluegiga.zendesk.com/entries/83269447-Convert-digit-to-ascii-hex-equivalent

#Timer event listener
event hardware_soft_timer(handle)
call gap_set_mode($84, gap_non_connectable)	# $84 to enable enhanced broadcasting (central node will acknowlwdge receipt of a broadcast
	output(0:1) = $2E	#serial number byte 1 
	output(1:1) = $E1   #serial number byte 2 (2EE1 = 12001 in decimal)
	#output(2:1) = $14
	#output(3:1) = $15
	#output(4:1) = $16
	#output(5:1) = $17
	#output(6:1) = $18
	#call gap_set_adv_data(0, 6, output(0:6))					# send ADC result to central node
	
	
call hardware_i2c_write($72,1,2,"\x80\x03")(written) #turn sensor on by writing 0x03 to address 0x00 using command code 0x80

call hardware_i2c_write($72,0,1,"\xAC")(written) # write to DATA0LOW register without stop bit
call hardware_i2c_read($72,1,2)(result,data_len,data) # get DATA0LOW register value without stop bit
#call system_endpoint_tx(4, 9, "Data_0 = ")
#call print_uint31(4, data) # print number to UART1
output(2:1) = data
call hardware_i2c_write($72,0,1,"\xAD")(written) # write to DATA0High register without stop bit
call hardware_i2c_read($72,1,2)(result,data_len,data) # get DATA0High register value without stop bit
#call system_endpoint_tx(4, 9, " Data_1 = ")
#call print_uint31(4, data) # print number to UART1
#call system_endpoint_tx(4, 2, "\r\n")
output(3:1) = data

call hardware_i2c_write($72,0,1,"\xAE")(written) # write to DATA1LOW register without stop bit
call hardware_i2c_read($72,1,2)(result,data_len,data) # get DATA1LOW register value without stop bit
#call system_endpoint_tx(4, 9, " Data_1 = ")
#call print_uint31(4, data) # print number to UART1
#call system_endpoint_tx(4, 2, "\r\n")
output(4:1) = data

call hardware_i2c_write($72,0,1,"\xAF")(written) # write to DATA1 High register without stop bit
call hardware_i2c_read($72,0,2)(result,data_len,data) # get DATA1 High register value without stop bit
#call system_endpoint_tx(4, 9, " Data_1 = ")
output(5:1) = data
output(6:1) = $ff  #end of data
output(7:1) = $ff  #end of data
call gap_set_adv_data(0, 8, output(0:8))					# send ADC result to central node
call gap_set_mode(0, 0)								# disable GAP broadcasts

end
