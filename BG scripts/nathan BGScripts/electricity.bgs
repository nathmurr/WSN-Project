# Nathan Murray Prototype Light Intensity sensor
#Slave address is floating therefore 0x72
#
#
#
#
#
dim output_res(6)
dim ranm
dim temp
dim bat_pct     # container for battery measurement percentage
dim no_ack_count	# counter for central node no acknowledgement count
dim ack_response	# counter for central node acknowledge response flag
dim ack_count
dim power
dim adaptive_power
dim response_received

event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
	#call gap_set_mode(0, 0) #don't enable broadcasts at startup
	call gap_set_adv_parameters(200, 300, $04)
	call hardware_io_port_config_direction(1, $FF) #Set P1_4 as output which controls power to op amp 
	call hardware_set_soft_timer(150000, 1, 0) #5 second timer in order to run tx power algorithm
	power = 2 #start transmitting at highest power level
	call hardware_set_txpower(power) # set power level to 15 initially 
	no_ack_count = 0
	response_received = 0
	#call gap_set_mode($84, gap_undirected_connectable)	# $84 to enable enhanced broadcasting (central node will acknowlwdge receipt of a broadcast
	#call gap_set_adv_data(0, 1, $FF)# send continuous data to central node for adaptive power algorithm
end

event hardware_soft_timer(handle)

	if (handle = 1) then # main timer
	call hardware_io_port_write(1, $FF, $1) # Set P1_4 high to power op amp peak detector circuit
		call system_endpoint_tx(4,1, "AB")#This is used as a delay for the op amp circuit to stabilise
		call system_endpoint_tx(4,1, "AB")#This is used as a delay for the op amp circuit to stabilise
		call system_endpoint_tx(4,1, "AB")#This is used as a delay for the op amp circuit to stabilise
		call system_endpoint_tx(4,1, "AB")#This is used as a delay for the op amp circuit to stabilise
		call system_endpoint_tx(4,1, "AB")#This is used as a delay for the op amp circuit to stabilise
		call system_endpoint_tx(4,1, "AB")#This is used as a delay for the op amp circuit to stabilise
		# trigger ADC read on P0_0, full 12-bit decimation, AVDD reference
		response_received = 0
		call hardware_adc_read(0, 3, 0)
		call hardware_adc_read(15, 3, 0) #read battery percentage
		
		
		if ack_count > 5 then #decrease power
				if power < 16 then
				if power > 0 then
					power = power - 1
					call hardware_set_txpower(power) # set power level to +1 
					ack_count = 0
					else
					ack_count = 5
				end if
				end if
			end if
		call hardware_set_soft_timer( 0, 1, 1) #disable current timer as only one timer can run at a time
		call hardware_set_soft_timer(65000, 2, 1)#timeout if central node doesn't acknowledge
	end if
	
	if (handle = 2) then # broadcast timeout if central node does not acknowledge within 2 seconds
	
		if response_received = 0 then #no response received from central node
		
		if ack_count > 0 then
		ack_count = ack_count - 1
		end if
		
			call gap_set_mode(0, 0)
			no_ack_count = no_ack_count + 1
		
			if no_ack_count > 3 then #increase power
				if power < 12 then
					power = power + 4
					call hardware_set_txpower(power) # set power level to +1 
					no_ack_count = 0
					else
					power = 15
					call hardware_set_txpower(power) # set power level to +1 
					no_ack_count = 0
				end if
			end if
					
		end if
	call gap_set_mode(0, 0)	
	call hardware_set_soft_timer(163840, 1, 0) # set timer to 5 seconds in order to re transmit the non ack so data is not missed
	end if
	call gap_set_mode(0, 0)	
	call hardware_set_soft_timer(150000, 1, 0) # set timer to original timer for next sample
end

event hardware_adc_result(input, value)
if input = $0 then
    # write 2 bytes of ADC data to GATT characteristic

#bit shift by 8 to get LSB
temp = (value >> 8)
ranm = value

output_res(0:1) = $4E	#serial number byte 1 
output_res(1:1) = $21   #serial number byte 2 (36B1 = 14001 in decimal)
output_res(2:3) = temp
output_res(3:3) = ranm
output_res(4:1) = $FF
output_res(5:1) = $FF
#call gap_set_adv_data(0, 6, output_res(0:6))					# send result to central node
end if

if input = 15 then #15 is a battery adc read
bat_pct = (value - 17616) * 100 / (23342 - 17616) #obtained from bluegiga
# enforce 0%/100% bounds, obtained from bluegiga
        if bat_pct > 100 then
            bat_pct = 100
        end if
        if bat_pct < 0 then
            bat_pct = 0
        end if
		
		output_res(6:1) = bat_pct	#set output byte for battery percentage
		call gap_set_mode($84, gap_undirected_connectable)	# $84 to enable enhanced broadcasting (central node will acknowlwdge receipt of a broadcast
call gap_set_adv_data(0, 6, output_res(0:6))# send result to central node
#call hardware_io_port_write(1, $80, $00) # Set P0_4 low to disable op amp circuit and save power


end if
end

event gap_scan_response(rssi, packet_type, sender, address_type, bond, data_len, data_data) # central node has spoken
	if packet_type = 3 then	#central node has acknowledged receipt of sent data
	response_received = 1
	ack_count = ack_count + 1
	if no_ack_count > 0 then
	no_ack_count = no_ack_count - 1
	end if
				
		call gap_set_mode(0, 0)	#end broadcasts so processor can go back to sleep and discontinue transmissions
	end if
	end

