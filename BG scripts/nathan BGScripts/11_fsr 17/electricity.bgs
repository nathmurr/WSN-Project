# Nathan Murray Prototype Light Intensity sensor
#Slave address is floating therefore 0x72
#
#
#
#
#
#
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw)

#Set timer to generate event every 1s
    call hardware_set_soft_timer(20000, 1, 0)

    call gap_set_mode($84, gap_non_connectable)	# $84 to enable enhanced broadcasting (central node will acknowlwdge receipt of a broadcast
	call gap_set_adv_parameters(200, 200, $04)
    call hardware_set_soft_timer($28000, 1, 0)	# continuous 1 second timer
end


dim written
dim result
dim data_len
dim data
dim string(3)
dim output (8)
dim adc_result
dim adc_result2


# procedure to output ASCII-formatted integer from a Hex value (input range [0, 2147483647]) obtained from https://bluegiga.zendesk.com/entries/83269447-Convert-digit-to-ascii-hex-equivalent

#Timer event listener
event hardware_soft_timer(handle)
if (handle = 1) then
	


	call gap_set_mode($84, gap_non_connectable)	# $84 to enable enhanced broadcasting (central node will acknowlwdge receipt of a broadcast
	output(0:1) = $4E	#serial number byte 1 
	output(1:1) = $21   #serial number byte 2 (4E21 = 20001 in decimal)
	end if
	call hardware_adc_read($0, $3, $2)(result)
	if (handle = 2) then
	call hardware_set_soft_timer($28000, 3, 1)#call single one shot timer handle 1 to allow data to be transferred over the air
	call gap_set_mode(0, 0)								# disable GAP broadcasts and go back to sleep
	end if
end

event hardware_adc_result(input, value)
	adc_result = value
	adc_result2 = value
adc_result = (adc_result >> 8)#bit shift by 8 to get LSB
	output(2:1) = adc_result2
	output(3:1) = adc_result
	output(4:1) = $FF
	output(5:1) = $FF
	call gap_set_adv_data(0, 6, output(0:6))					# send result to central node
	call hardware_set_soft_timer( 0, 1, 1) #disable current timer as only one timer can run at a time
	call hardware_set_soft_timer($10000, 2, 1)#call single one shot timer handle 2 to allow data to be transferred over the air
		end


