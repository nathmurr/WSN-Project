# Nathan Murray 
#Temp on/off sensor BLE113 Script
#20/08/15 Rev -
#Script communicates to temp/Hum HTU21D sensor via I2C address $72
#Battery percentage is appended to data message also
#7 bit I2C address is x40, therefore 8 bit address is x80

event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw)

	call gap_set_mode($84, gap_non_connectable)	# $84 to enable enhanced broadcasting (central node will acknowlwdge receipt of a broadcast
    call hardware_set_soft_timer(70000, 1, 0)#set sampling period
    call gap_set_adv_parameters(200, 200, $04)#set gap transmission time and transmit only on a single broadcast channel
	call gap_set_mode(0, 0)#disable GAP broadcasts on boot
end

#variable declarations
dim written
dim result
dim data_len
dim data (3)
dim string(3)
dim temp
dim temp1(4)
dim temp2
dim count
dim tmp(5)
dim rh
dim output_temp (8)
dim output_hum (8)
dim output (8)

event hardware_soft_timer(handle)

if (handle = 1) then

	output_temp(0:1) = $32	#serial number byte 1 
	output_temp(1:1) = $C9   #serial number byte 2 (32C9 = 13001 in decimal)
	
	call hardware_i2c_write($80,1,1,"\xE3")(written) # write to temperature conversion register 0xE3 with stop bit
	call hardware_i2c_read($80,1,2)(result,data_len,data(0:data_len)) # read temperature result plus CRC (3rd CRC byte isn't transmitted and is ignored)

	temp = data(0:2)#store data into array
	temp = (temp >> 8)#bit shift by 8 to get LSB
	temp2 = data(0:2)#Get upper 8 bits again

	output_temp(2:1) = temp2 #store upper 8 bits to array
	output_temp(3:1) = temp #store lower 8 bits to array
	output_temp(4:1) = $FF #end of data 
	output_temp(5:1) = $FF #end of data
	call hardware_adc_read(15, 3, 0) #read battery percentage adc
end if

if (handle = 2) then
	call hardware_set_soft_timer(70000, 1, 0) # re enable old timer
	call gap_set_mode(0, 0)	# disable GAP broadcasts and go back to sleep
end if
end

event hardware_adc_result(input, value)

if input = 15 then #15 is a battery adc read
	bat_pct = (value - 17616) * 100 / (23342 - 17616) #obtained from bluegiga
	# enforce 0%/100% bounds, obtained from bluegiga
        if bat_pct > 100 then
            bat_pct = 100
        end if
        if bat_pct < 0 then
            bat_pct = 0
        end if
		
	output_temp(6:1) = bat_pct	#set output byte for battery percentage
	call hardware_set_soft_timer( 0, 1, 1) #disable current timer as only one timer can run at a time
	call gap_set_mode($84, gap_undirected_connectable)	# $84 to enable enhanced broadcasting (central node should acknowlwdge receipt of a broadcast
	call gap_set_adv_data(0, 7, output_temp(0:7))# send result to central node
	call hardware_set_soft_timer(32678, 2, 1)#1 second timeout if central node doesn't acknowledge
		
end if
end

event gap_scan_response(rssi, packet_type, sender, address_type, bond, data_len, data_data) # central node has acknowledged
	if packet_type = 3 then	#central node has acknowledged receipt of sent data
		call gap_set_mode(0, 0)	#end broadcasts so processor can go back to sleep and discontinue transmissions
	end if
end
